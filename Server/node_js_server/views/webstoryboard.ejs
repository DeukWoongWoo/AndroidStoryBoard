<!DOCTYPE html>
<html>

<head>
    <style>
    </style>
</head>

<body>
<div>


    <svg class="storyboard light" currentScale="1" viewBox="0 0 2000 2000" id="storyboard-svg"
         style="background: white;">

        <rect id="storyboard-background" x="-5000" y="-5000" width="10000" height="10000"
              style="fill: #8BC5B7; stroke: black;  stroke-width: 100px;" onmousedown="startDrag(event)"/>

        <svg onmousedown="startDrag(event, this)">
            <image x="400" y="300" height="200" width="200" xlink:href="/image/a/a/ori2.jpg"></image>
        </svg>
        <svg onmousedown="startDrag(event, this)">
            <rect class="test-class" x="10" y="10" width="300" height="200"
                  style="stroke: white; fill: #D4C9AD; stroke-width: 1px;" id="test-rect">
            </rect>

            <circle cx="50" cy="100" r="25" style="stroke: black; fill: white;"/>
            <text font-size="20" x="10" y="10" stroke="black" height="100px">

                <tspan x="10" y="70">Second line.</tspan>
            </text>
        </svg>
    </svg>

</div>

</body>
<!--<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>-->
<!--<script type="text/javascript" src="javascripts/d3/d3.js"></script>-->
<!--<script src="javascripts/storyboard/Storyboard.js"></script>-->
<script>
    //    var storyboard = new Storyboard();
    //    storyboard.targetDiv('#storyboard-svg');
    //
    //    $.get("/storyboard/" + app_name, function (storyboardData) {
    //        storyboard.removeStoryboard();
    //        storyboard.addBackBoard();
    //        storyboard.storyboardData(storyboardData);
    //
    //        storyboard.drawActivityObject();
    //
    //        storyboard.initLine();
    //        storyboard.drawNextActivityLine();
    //
    //        storyboard.removeActivityObject();
    //        storyboard.drawActivityObject();
    //    });

    /**
     *  위
     *      텍스트 자동 줄 바꿈 구현 방법 찾아보기
     *
     *      랜더링 순서 변경 완료
     *      nextActivity를 보여주기 위한 선 드래그 할때 이동 가능하게 구현 완료
     *      서버로 부터 사용자가 등록한 스토리보드 데이터를 받아와서
     *      스토리보드 액티비티 오브젝트 그려주기 완료
     *  아래
     *      스토리보드의 확대, 축소, 이동 구현 완료
     */

    var storyboardSvg = document.getElementById('storyboard-svg');
    storyboardSvg.setAttribute('height', window.innerHeight * 0.4);
    storyboardSvg.setAttribute('width', window.innerWidth * 0.4);

    var box = storyboardSvg.viewBox.baseVal;
    var storyboardBack = document.getElementById('storyboard-background');
    var backWidth = storyboardBack.getAttribute('width');
    var backHeight = storyboardBack.getAttribute('height');

    $('#storyboard-svg').mouseover(function () {
        rectMouseOver();
        document.onmousewheel = function () {
            return false;
        }
    }).mouseout(function () {
        document.onmousewheel = null;
    });

    $("#storyboard-svg").on("mousewheel", function (event) {
        var baeyul = 12;
        var zoomValue = event.originalEvent.wheelDelta;
        if (box.width + zoomValue * baeyul > 0 && box.height + zoomValue * baeyul > 0
                && box.width + zoomValue < backWidth && box.height + zoomValue < backHeight) {
            box.x -= zoomValue / 2;
            box.y -= zoomValue / 2;
            box.width += zoomValue;
            box.height += zoomValue;


            d3.selectAll('text').attr('font-size', function (d, i) {
                return d3.select(this).attr('font-size') * 1 - zoomValue * 0.05;
            });
        }
    });

    var bae = box.width / window.innerHeight * 0.4;
    var rX = 0, rY = 0;
    var targetObj;
    var startLineObj;
    var endLineObj;

    function startDrag(e, obj) {
        obj = changeLocation(obj);
        var e_obj = window.event ? window.event : e;
        targetObj = obj;
        bae = box.width / (window.innerHeight * 0.4);

        if (obj) {
            saveLineInfo(obj);

            rX = targetObj.getAttribute('x') - e_obj.clientX * bae;
            rY = targetObj.getAttribute('y') - e_obj.clientY * bae;
        } else {
            rX = box.x * (-1) - (e_obj.clientX * bae);
            rY = box.y * (-1) - (e_obj.clientY * bae);
        }

        document.onmousemove = moveDrag;
        document.onmouseup = stopDrag;
        if (e_obj.preventDefault)e_obj.preventDefault();
    }

    function changeLocation(obj) {
        var backupObj = obj;
        $(obj).remove();
        obj = backupObj;
        $('.storyboard').append(obj);
        return obj;
    }

    function saveLineInfo(obj) {
        var sCount = 0, eCount = 0;
        var line = $('line' + '.' + $(obj).attr('id'));
        startLineObj = new Array();
        endLineObj = new Array();

        for (var i = 0; i < line.length; i++) {
            if (line[i].getAttribute('start') == $(obj).attr('id')) {
                startLineObj[sCount++] = line[i];
            } else if (line[i].getAttribute('end') == $(obj).attr('id')) {
                endLineObj[eCount++] = line[i];
            }
        }
    }

    function moveDrag(e) {
        var e_obj = window.event ? window.event : e;
        bae = box.width / (window.innerHeight * 0.4);
        if (targetObj) {
            targetObj.setAttribute('x', (rX + e_obj.clientX * bae));
            targetObj.setAttribute('y', (rY + e_obj.clientY * bae));

            moveLine(startLineObj, e_obj, '1');
            moveLine(endLineObj, e_obj, '2');
        } else {
            if (rX + (e_obj.clientX * bae) < backWidth / 2
                    && box.width - (rX + (e_obj.clientX * bae)) < backWidth / 2)
                box.x = -(rX + (e_obj.clientX * bae));
            if (rY + (e_obj.clientY * bae) < backHeight / 2
                    && box.height - (rY + (e_obj.clientY * bae)) < backHeight / 2)
                box.y = -(rY + (e_obj.clientY * bae));
        }
        return false;
    }

    function moveLine(lineObj, e_obj, se) {
        for (var i in lineObj) {
            var x = lineObj[i].getAttribute('x' + se) * 1;
            var y = lineObj[i].getAttribute('y' + se) * 1;
            lineObj[i].setAttribute('x' + se, (rX + e_obj.clientX * bae) + 150);
            lineObj[i].setAttribute('y' + se, (rY + e_obj.clientY * bae) + 250);
        }
    }

    function stopDrag() {
        document.onmousemove = null;
        document.onmouseup = null;
    }

</script>

</html>

